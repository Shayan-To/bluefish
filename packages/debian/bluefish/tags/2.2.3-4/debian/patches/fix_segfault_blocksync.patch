Author: Olivier Sessink <oli4@users.sourceforge.net>
Acked-By: Daniel Leidert <dleidert@debian.org>
Description: Fixed the regular expression matching for blocksync. Since
 dotmatchall was no longer enabled by default the synchronise block query
 did no longer always work anymore. I've added that option to
 snr3run_extern so it can be enabled by blocksync.
Origin: http://bluefish.svn.sourceforge.net/viewvc/bluefish?view=revision&revision=7582

--- a/src/blocksync.c
+++ b/src/blocksync.c
@@ -274,7 +274,7 @@
 		DEBUG_MSG("searchpat=%s\n",searchpat);
 		g_free(tmp1);
 		g_free(tmp2);
-		snr3_run_extern_replace(bsdialog->bfwin->current_document, searchpat, snr3scope_alldocs,snr3type_pcre,TRUE, bsdialog->allblock,FALSE);
+		snr3_run_extern_replace(bsdialog->bfwin->current_document, searchpat, snr3scope_alldocs,snr3type_pcre,TRUE, bsdialog->allblock,FALSE, TRUE);
 		g_free(searchpat);
 		
 		/* cleanup */
--- a/src/file_dialogs.c
+++ b/src/file_dialogs.c
@@ -709,7 +709,7 @@
 			author_tmp = g_strconcat("<meta name=\"author\" content=\"", realname, "\" ", NULL);
 			snr3_run_extern_replace(doc,
 									"<meta[ \t\n]+name[ \t\n]*=[ \t\n]*\"author\"[ \t\n]+content[ \t\n]*=[ \t\n]*\"[^\"]*\"[ \t\n]*",
-									snr3scope_doc, snr3type_pcre, FALSE, author_tmp, FALSE);
+									snr3scope_doc, snr3type_pcre, FALSE, author_tmp, FALSE, FALSE);
 			g_free(author_tmp);
 		}
 	}
@@ -743,7 +743,7 @@
 		date_tmp = g_strconcat("<meta name=\"date\" content=\"", isotime, "\" ", NULL);
 		snr3_run_extern_replace(doc,
 								"<meta[ \t\n]+name[ \t\n]*=[ \t\n]*\"date\"[ \t\n]+content[ \t\n]*=[ \t\n]*\"[^\"]*\"[ \t\n]*",
-								snr3scope_doc, snr3type_pcre, FALSE, date_tmp, FALSE);
+								snr3scope_doc, snr3type_pcre, FALSE, date_tmp, FALSE, FALSE);
 		g_free(date_tmp);
 	}
 
@@ -752,7 +752,7 @@
 		snr3_run_extern_replace(doc,
 								"<meta[ \t\n]+name[ \t\n]*=[ \t\n]*\"generator\"[ \t\n]+content[ \t\n]*=[ \t\n]*\"[^\"]*\"[ \t\n]*",
 								snr3scope_doc, snr3type_pcre, FALSE,
-								"<meta name=\"generator\" content=\"Bluefish " VERSION "\" ", FALSE);
+								"<meta name=\"generator\" content=\"Bluefish " VERSION "\" ", FALSE, FALSE);
 	}
 
 	if (doc->uri)
--- a/src/plugin_snippets/snippets_leaf_snr.c
+++ b/src/plugin_snippets/snippets_leaf_snr.c
@@ -74,10 +74,11 @@
 	 * is_case_sens: #gint
 	 * replace_pattern: #gchar* to replace pattern.
 	 * unescape: #gint
+	 * dotmatchall: gboolean
 	 * */
 	DEBUG_MSG("snippets_snr_run_from_strings, useescapechars=%s, unescape=%d\n",useescapechars,unescape);
 	snr3_run_extern_replace(doc, (gchar *)searchpat, 
-						scope,type, casesensnum, (gchar *)replacepat,unescape);
+						scope,type, casesensnum, (gchar *)replacepat,unescape, FALSE);
 }
 
 typedef struct {
--- a/src/snr3.c
+++ b/src/snr3.c
@@ -800,7 +800,7 @@
 		options |= G_REGEX_CASELESS;
 	if (s3run->dotmatchall)
 		options |= G_REGEX_DOTALL;
-	
+	DEBUG_MSG("compile_regex, compiling %s\n", s3run->query);
 	s3run->regex = g_regex_new(s3run->query, options, G_REGEX_MATCH_NEWLINE_ANY, &gerror);
 	if (gerror) {
 		if (s3run->dialog) {
@@ -846,6 +846,7 @@
 	
 	if (s3run->type == snr3type_pcre) {
 		if (!compile_regex(s3run)) {
+			DEBUG_MSG("update_snr3run, failed to compile query %s\n",s3run->query);
 			g_free(s3run->query);
 			s3run->query = NULL; /* mark query as unusable */
 			return -1;
@@ -1754,25 +1755,29 @@
 void
 snr3_run_extern_replace(Tdocument * doc, const gchar * search_pattern, Tsnr3scope scope,
 							 Tsnr3type type, gboolean is_case_sens, const gchar * replace_pattern,
-							 gboolean unescape) 
+							 gboolean unescape, gboolean dotmatchall) 
 {
 	gint so,eo;
 	GList *tmplist;
 	Tsnr3run * s3run = snr3run_new(doc->bfwin, NULL);
 	snr3run_multiset(s3run, search_pattern, NULL, type,snr3replace_string,scope);
+	s3run->dotmatchall = dotmatchall;
 	s3run->replace = g_strdup(replace_pattern);
 	update_snr3run(s3run);
 	s3run->replaceall = TRUE;
 	
 	switch(s3run->scope) {
 		case snr3scope_doc:
+			DEBUG_MSG("snr3_run_extern_replace, run in doc\n");
 			extern_doc_backend(s3run, doc, 0, -1);
 		break;
 		case snr3scope_cursor:
+			DEBUG_MSG("snr3_run_extern_replace, run beyond cursor\n");
 			so = doc_get_cursor_position(doc);
 			extern_doc_backend(s3run, doc, so, -1);
 		break;
 		case snr3scope_selection:
+			DEBUG_MSG("snr3_run_extern_replace, run in selection\n");
 			if (doc_get_selection(doc, &so, &eo)) {
 				extern_doc_backend(s3run, doc, so, eo);
 			} else {
@@ -1780,7 +1785,9 @@
 			}
 		break;
 		case snr3scope_alldocs:
+			DEBUG_MSG("snr3_run_extern_replace, run in all documents\n");
 			for (tmplist=g_list_first(s3run->bfwin->documentlist);tmplist;tmplist=g_list_next(tmplist)) {
+				DEBUG_MSG("snr3_run_extern_replace, all documents, doc=%p\n",tmplist->data);
 				extern_doc_backend(s3run, tmplist->data, 0, -1);
 			}
 		break;
--- a/src/snr3.h
+++ b/src/snr3.h
@@ -179,6 +179,6 @@
 
 void snr3_run_extern_replace(Tdocument * doc, const gchar * search_pattern, Tsnr3scope scope,
 							 Tsnr3type type, gboolean is_case_sens, const gchar * replace_pattern,
-							 gboolean unescape);
+							 gboolean unescape, gboolean dotmatchall);
 
 #endif /* #define __SNR3_H_ */
